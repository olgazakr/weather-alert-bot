"""
Module that contains the handlers for the bot's commands and states.
"""

import os

import app.database.requests as requests
import app.keyboards as keyboards
import app.weather_request as weather_request
import app.location_request as location_request

from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram import F, Router
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from dotenv import load_dotenv, find_dotenv


load_dotenv(find_dotenv())
router = Router()


class Location(StatesGroup):
    """
    Class that represents the states of the bot.
    """
    input_location = State()
    found_locations = State()
    select_location = State()


@router.message(CommandStart())
async def start_bot(message: Message, state: FSMContext):
    """
    Handler for the /start command.
    Sets the user in the database and starts the bot's state machine.
    """
    telegram_id = message.from_user.id
    telegram_username = message.from_user.username
    await requests.set_user(telegram_id, telegram_username)
    await state.set_state(Location.input_location)
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç,'
                         '–Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –í—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞ üåéüåèüåç')
    await state.set_state(Location.found_locations)


@router.message(Location.found_locations)
async def find_locations(message: Message, state: FSMContext):
    """
    Handler for the found_locations state.
    Sends a message with the list of possible locations to select and
    updates the state.
    """
    location = message.text
    possible_locations = await location_request.make_request(
        location,
        os.getenv('WEATHER_TOKEN')
    )
    await state.update_data(found_locations=possible_locations)
    i = 1
    answer = f'–ù–∞–π–¥–µ–Ω–æ {len(possible_locations)} –Ω–∞—Å–µ–ª—ë–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ üåá\n' \
              '–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–ø–∏—Å–∫–∞:\n'
    for location in possible_locations:
        answer += f'{i}. {location["name"]}, ' \
                  f'{location["country"]}, ' \
                  f'{location["state"]}\n'
        i += 1
    await message.answer(
        answer,
        reply_markup=await keyboards.get_keyboard(possible_locations)
    )
    await state.set_state(Location.select_location)


@router.callback_query(Location.select_location)
async def select_location(callback: CallbackQuery, state: FSMContext):
    """
    Handler for the select_location state.
    Sets the user's coordinates in the database and sends a message with
    the weather conditions.
    """
    data = await state.get_data()
    answer = data['found_locations'][int(callback.data) - 1]
    await callback.message.edit_text(f'–í—ã –≤—ã–±—Ä–∞–ª–∏: {answer["name"]}, '
                                    f'{answer["country"]}, '
                                    f'{answer["state"]}, '
                                    f'–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {answer["lat"]}, '
                                    f'{answer["lon"]}'
                                )
    
    await requests.set_coordinates_for_user(
        callback.from_user.id,
        answer['lat'],
        answer['lon']
    )
    
    weather = await weather_request.make_request(
        answer['lat'],
        answer['lon'],
        os.getenv('WEATHER_TOKEN')
    )
    
    if "error" in weather:
        weather_message = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ."
    else:
        weather_message = f'{weather["weather"][0]["description"]}, ' \
                          f'—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather["main"]["temp"]}¬∞C üå°Ô∏è, ' \
                          f'—Å–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {weather["wind"]["speed"]} –º/—Å üå¨Ô∏è'

    answer = f'–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: {weather_message}\n' \
              '–ë–æ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ üï∞Ô∏è\n' \
              '–û–Ω —É–≤–µ–¥–æ–º–∏—Ç –í–∞—Å, –µ—Å–ª–∏ –≤ –≤–∞—à–µ–π –ª–æ–∫–∞—Ü–∏–∏: \n' \
              '1. –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ–¥–Ω–∏–º–µ—Ç—Å—è –≤—ã—à–µ 35¬∞–° –∏–ª–∏ –æ–ø—É—Å—Ç–∏—Ç—Å—è –Ω–∏–∂–µ -15¬∞–°\n' \
              '2. –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ –ø—Ä–µ–≤—ã—Å–∏—Ç 10 –º/—Å\n' \
              '3. –í—ã–ø–∞–¥–µ–Ω–∏–µ –æ—Å–∞–¥–∫–æ–≤: –¥–æ–∂–¥—å üåßÔ∏è, —Å–Ω–µ–≥–æ–ø–∞–¥ üå®Ô∏è, –≥—Ä–æ–∑–∞ ‚õàÔ∏è\n' \
              '4. –£—Å–ª–æ–≤–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏: —Ç—É–º–∞–Ω, –º–≥–ª–∞ üå´Ô∏è\n' \
              '5. –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è: —Ç–æ—Ä–Ω–∞–¥–æ üå™Ô∏è, –≤—ã–ø–∞–¥–µ–Ω–∏–µ –≤—É–ª–∫–∞–Ω–∏—á–µ—Å–∫–æ–≥–æ –ø–µ–ø–ª–∞ üåã'

    await callback.message.answer(answer)

    await state.clear()
